/** 
 * PASO 43: CACLULAR ESTADISTICA SOBRE RESULADO DE LA CLASIFICACIÓN EN AGRICULTURA
 * SEPTIEMBRE 2020
 * DOCUMENTACIÓN: https://docs.google.com/document/d/1V1_kj6idnTzLslsXFC11EbU-qGcwhsHBWQTgRLR9QEw/edit#
 * ----------------------------------------------------------------------------------------------
 */   
   
/** 
 * PARAMETROS DE USUARIO:
 * Ajuste los parámetros a continuacón para generar la imagen de pixeles estables correspondiente
 * ----------------------------------------------------------------------------------------------
 */
var param = { 
    regionId: 20601,  //Region de Clasificacion 
    pais: 'BOLIVIA', 
    version_input: 3, // Versión del transversal agricultura
};


var paths = require('users/raisgmb01/MapBiomas_C3:MODULES/CollectionDirectories').paths;

var dirinput = 'projects/mapbiomas-raisg/TRANSVERSALES/AGRICULTURA_3/clasificacion'
var dirinputFT = 'projects/mapbiomas-raisg/TRANSVERSALES/AGRICULTURA_3/clasificacion-ft'




var AssetRegions = paths.regionVector
var AssetRegionsRaster = paths.regionCRaster

var prefixo_out = param.pais+ '-' + param.regionId + '-v' + param.version_input+'-agri'

var region = ee.FeatureCollection(AssetRegions).filterMetadata('id_regionC', 'equals', param.regionId)
var regionRaster = ee.Image(AssetRegionsRaster).eq(param.regionId).selfMask()
print(region)

var palettes = require('users/mapbiomas/modules:Palettes.js');
var vis = {
    'min': 0,
    'max': 34,
    'palette': palettes.get('classification2')
};

// var class4FT = ee.ImageCollection(dirinput)
//                       .filterMetadata('code_region', 'equals', param.regionId)  //
//                       .filterMetadata('version', 'equals', param.version_input)
//                       .first()
                      
if (param.version_input===1 || param.version_input===3){
  var assetPath = dirinput + '/' + param.pais + '-' + param.regionId;  
}
else{
  var assetPath = dirinputFT + '/' + param.pais + '-' + param.regionId;  
}



var class4FT = ee.Image(assetPath  + '-' + param.version_input);

print(class4FT)


  /**
 * Función para generar las estadísticas de cobertura por año y clase
 */
function getAreas(image, region) {

  var pixelArea = ee.Image.pixelArea();
  
  var reducer = {
    reducer: ee.Reducer.sum(),
    geometry: region.geometry(),
    scale: 30,
    maxPixels: 1e13
  };
  
  var bandNames = image.bandNames();
  
  var classIds = ee.List.sequence(0, 2);
  
  
  bandNames.evaluate( function(bands, error) {
    
    if(error) print(error.message);
    
    var yearsAreas = [];
  
  
    bands.forEach(function(band) {
    
      var year = ee.String(band).split('_').get(1),
          yearImage = image.select([band]);
  
      
      // Calcular áreas para cada clase cobertura
      var covers = classIds.map(function(classId) {
  
        classId = ee.Number(classId).int8();
      
        var yearCoverImage = yearImage.eq(classId),
            coverArea = yearCoverImage.multiply(pixelArea).divide(1e6);
        
        return coverArea.reduceRegion(reducer).get(band);
  
      }).add(year);
  
    
      // Generar la lista de keys para el diccionario
      var keys = classIds.map(function(item) {
  
        item = ee.Number(item).int8();
        
        var stringItem = ee.String(item);
        
        stringItem = ee.Algorithms.If(
          item.lt(10),
          ee.String('ID0').cat(stringItem),
          ee.String('ID').cat(stringItem)
        );
        
        return ee.String(stringItem);
        
      }).add('year');
  
      
      // Crear la lista de features para cada año, sin geometrías
      var dict = ee.Dictionary.fromLists(keys, covers);
  
      yearsAreas.push( ee.Feature(null, dict) );
      
    });
    
    
    yearsAreas = ee.FeatureCollection(yearsAreas);
  
    
    Export.table.toDrive({
      collection: yearsAreas,
      description: 'ST-'+prefixo_out,
      fileFormat: 'CSV',
      folder: 'ESTADISTICAS-AGRI'
    });
      
  });
  
}

// Generar estadísticas de cobertura
getAreas(class4FT, region)
