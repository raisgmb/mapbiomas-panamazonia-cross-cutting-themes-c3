/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Puntos_add = 
    /* color: #d63000 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Point([-67.7201992706215, -17.05781465853216]),
            {
              "reference": 1,
              "system:index": "0"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/** 
 * PASO 3: GENERACION DE MUESTRAS DE ENTRENAMIENTO Y SELECCION DE VARIABLES
 * SEPTIEMBRE 2020
 * DOCUMENTACIÓN: https://docs.google.com/document/d/1V1_kj6idnTzLslsXFC11EbU-qGcwhsHBWQTgRLR9QEw/edit?userstoinvite=sig2%40provitaonline.org&ts=5f7333f7&actionButton=1#heading=h.vae2491gsdj6
 * ----------------------------------------------------------------------------------------------
 */
 
/** 
 * ----------------------------------------------------------------------------------------------
 * PARAMETROS DE USUARIO:
 * Ajuste los parámetros a continuacón para generar sus muestras de entrenamiento 
 * No se recomienda modificar el script en ninguna otra sección.
 * ----------------------------------------------------------------------------------------------
 */

 var Geom01 = ee.FeatureCollection([]) // generamos N geometrias de acuerdo a lo que se cuenta con ínformación base
 var Geom02 = ee.FeatureCollection([]) // y recuperamos de un asset guardado
 var GeomAdicional = [Geom01,Geom02,Puntos_add]
 
var param = {
  regionId: 20601,
  gridName: '',
  sampleSize: 7000,
  minSamples: 2000,
  yearsPreview: [2000, 2018],
  mos:'',
  variables: [
    // bandas espectrales:
    // bandas derivadas del SMA:
    // indices:
    "blue_median","green_dry","green_median","red_dry","red_median",
 "nir_dry", "nir_median", "nir_wet", "swir1_dry", "swir1_median",
 "swir1_wet", "swir2_dry", "swir2_median", "swir2_wet", "ndwi_gao_wet",
 "cai_wet_min", "green_dry_qmo", "green_wet_min", "green_wet_qmo", "ndwi_gao_dry_min",
 "ndwi_gao_wet_max", "ndwi_gao_wet_min", "ndwi_gao_wet_qmo", "nir_dry_qmo", "nir_wet_qmo",
 "red_dry_max", "red_dry_min", "red_dry_qmo", "red_wet_max", "swir1_dry_max",
 "swir1_dry_qmo", "swir1_wet_max", "swir1_wet_min", "swir1_wet_qmo", "swir2_dry_min",
 "swir2_dry_qmo", "swir2_wet_max", "swir2_wet_qmo"
  ],
  'ActPuntosAdicional' :1, // 0-1  0 no agrega puntos adicionales colectados, 1 adiciona puntos colectados
  'PuntosAdcionales': ee.FeatureCollection([]),
  Altura:0, //0 no adiciona banda Altura  -  1 Adiciona banda altura 
  Pendiente:0, //0 no adiciona Banda Pendiente - 1 Adiciona banda de pendiente
  ciclo: 'ciclo-1',
  reg:''
};
/**
 * Import Modules CollectionDirectories
 */

GeomAdicional.forEach(function(Ele){
  param.PuntosAdcionales = param.PuntosAdcionales.merge(Ele)
})
var paths = require('users/raisgmb01/MapBiomas_C3:MODULES/CollectionDirectories').paths;

/**
 * ----------------------------------------------------------------------------------------------
 * INICIALIZACIÓN DE LA APLICACIÓN
 * Self invoked expresion que ejecuta el paso 3 de la metodología
 * ----------------------------------------------------------------------------------------------
 */
 // Seleccionamos las bandas de Agricultura

(function init(param) {

  var assets = {
    grids: paths.grids,
    regions: paths.regionVector,
    mosaics: 'projects/mapbiomas-raisg/MOSAICOS/',//paths.mosaics,
    stablePixels:paths.muestrasestablesRasterTA,
    classAreas: paths.AreasClassTA,
    outputs: paths.trainingPoints03TA
  };
  
  var rgb = ['swir1_median', 'nir_median', 'red_median'];
  var years = param.yearsPreview;
  print(years)
  var grid = param.gridName;
  var regionId = param.regionId;
  
  
  // Obtiene la version de salida en base al ciclo
  var version = getVersion(param.ciclo);
  var vMuestras = version.version_input_muestras;
  var vAreas = version.version_input_areas;
  
  
  // Crear máscara con base en el vector de región y carta
  var region = getRegion(assets.regions, assets.grids, regionId, grid);
  var vector = region.vector;
  param.reg = region.vector;
  
  // Importar assets con base en la región
  var mosaicPath = assets.mosaics;
  var assetsMosaics = [ 
     mosaicPath + 'workspace-c2-v2',
     mosaicPath + 'workspace-c3'
  ];
  param.mos = assetsMosaics[0]
  //var mosaic = getMosaic(assetsMosaics, regionId, param.variables, grid, vector);
  var RegMos = parseInt(param.regionId/100)
  RegMos = RegMos.toString();
  
  var mosaic = ee.ImageCollection(assetsMosaics[0])
              .filterMetadata('region_code','equals',RegMos)
              .filterBounds(region.vector)
              //.mosaic()
  var mosaic2 = ee.ImageCollection(assetsMosaics[1])
              .filterMetadata('region_code','equals',RegMos)
              .filterBounds(region.vector)
              //.mosaic()
  
  //mosaic = mosaic.addBands(mosaic2)
  //mosaic = mosaic.select(param.variables)
  //mosaic = mosaic.clip(region.vector)
  //print(mosaic)
  var country = region.vector.first().get('pais').getInfo().toUpperCase();
  country = country .replace('Ú', 'U').replace(' ', '_');
  var countryRegion = country + '-' + regionId;
  
  var stablePixels = ee.Image(
    assets.stablePixels + 'ME-' + countryRegion + '-' + vMuestras)
    .updateMask(region.rasterMask).rename('reference');

  var classAreas = ee.FeatureCollection(
    assets.classAreas + country + '/ac-' + countryRegion + '-' + vAreas);
  
  var classAreasDictionary = classAreas.first().toDictionary();

  var classNames = classAreasDictionary.keys()
    .filter(ee.Filter.stringContains('item', 'ID'));

  // Generar muestras de entrenamiento con base en el área de cada clase de cobertura
  var classIds = classNames.map(
    function(name) {
      var classId = ee.String(name).split('D').get(1);
      return ee.Number.parse(classId);
    }
  );

  // Calcular áreas de cada clase y total 
  var areas = classNames.map( function(name) {
    return classAreasDictionary.get(name);
  });
  
  var totalArea = areas.reduce(ee.Reducer.sum());

  // Calcular numero ponderado de muestras y generar puntos de entrenamiento
  var pointsPerClass = areas.map(
    function(area) {
      return getPointsByArea(
        area, totalArea, param.sampleSize, param.minSamples);
    });
  
  var training = getSamples(stablePixels, mosaic, mosaic2,classIds, pointsPerClass);
  var points = training.points;
  
  print('-------------------------------')
  // Enviar imagenes al mapa
  //var rgbMosaic = getMosaic(assetsMosaics, regionId, rgb, grid, vector);
  
  addLayersToMap(points, stablePixels, mosaic,mosaic2, years, vector);
  
  // Exportar assets y estadísticas a GEE y Drive
  if(grid && grid !== '') regionId = regionId + '-' + grid;
  var outputs = assets.outputs;
  var data = training.data;
  exportSamples(data, outputs, country, regionId, version.version_out);
  
  // Mostrar información en consola
  var zipped = classNames.zip(areas).zip(pointsPerClass);
  
  zipped = zipped.map(function(item){
    item = ee.List(item);
    var item0 = ee.List(item.get(0));
    var id = ee.String(item0.get(0)).replace('ID', 'Clase '); 
    var area = ee.String(item0.get(1));
    var points = ee.String(item.get(1));
    
    return ee.String(id)
      .cat(', Area: ').cat(area)
      .cat(', Muestras: ').cat(points);
  });
  
  zipped = zipped.filter(ee.Filter.stringContains('item', ': 0.0,').not());
  
  
  var samples = zipped.map(function(item){
    var points = ee.String(item).split('Muestras: ');
    points = ee.List(points).get(1);
    return ee.Number.parse(points);
  });
  
  var global = ee.Dictionary.fromLists(
    ['Area total', 'Muestras totales: '],
    [totalArea, samples.reduce(ee.Reducer.sum())]
  );
  
  print('Pixeles estables', stablePixels);
  print('Mosaicos', mosaic);
  print('Áreas', classAreas.first());
  print('Estadísticas generales', global);
  print('Estadísticas por clase', zipped);
      
})(param);




/**
 * FUNCIONALIDADES
 * A continuación se definen las funcionalidades que se usan en la aplicación.
 * Estas features se inyectan en la función init() que las ejecuta y genera los
 * resultados.
 * ----------------------------------------------------------------------------------------------
 */

/**
 * Funcion para asignar una versión por ciclo
 * 
 */
function getVersion(cicle) { 
  var version = {
    'ciclo-1': {
      // Ciclo I
      version_input_areas: 1,
      version_input_muestras: 1,
      version_out:1
    },
    'ciclo-2': {
      // Ciclo II
      version_input_areas: 2,
      version_input_muestras: 2,
      version_out:2
    }
  };
  
  return version[cicle];
}

/**
 * Constantes globales
 */
function ALL_YEARS() {
  return [
    1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
    1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 
    2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
    2018,2019,2020
  ];
}




/**
 * Función para generar region de interés (ROI) con base en
 * las región de clasificación o una grilla millonésima contenida en ella
 */
function getRegion(regionPath, gridPath, regionId, gridName){
  
  var region = ee.FeatureCollection(regionPath)
        .filterMetadata("id_regionC", "equals", regionId);
  
  if(gridName && gridName !== '') {
    var grid = ee.FeatureCollection(gridPath)
      .filterMetadata("name", "equals", gridName)
      .first();
      
    grid = grid.set('pais', region.first().get('pais'));
    
    region = ee.FeatureCollection(ee.Feature(grid));
  }
  
  // Generar el raster
  var setVersion = function(item) { return item.set('version', 1) };
  
  var regionMask = region
    .map(setVersion)
    .reduceToImage(['version'], ee.Reducer.first());
    
  return {
    vector: region,
    rasterMask: regionMask
  };

}



/**
 * Función para filtrar mosaicos
 * Permite filtrar los mosaicos por codigo de región y grilla 250.000,
 * También gestiona la selección de índices que serán utilizados para generar los
 * puntos de entrenamiento.
 */
function getMosaic(paths, regionId, variables, gridName,regionVector) {
  
}
 


/**
 * Función para calcular numero de muestras de entrenamiento con base en el área
 * que ocupa cada clase
 */
function getPointsByArea(singleArea, totalArea, sampleSize, minSamples) {
  return ee.Number(singleArea)
    .divide(totalArea)
    .multiply(sampleSize)
    .round()
    .int16()
    .max(minSamples);
}



/**
 * Función para implementar la colecta de puntos todos los años de la lista param.year
 * definida en los parámetros de usuario.
 */
 // Aumentamos la parte de pendiente 
 //var srtm = ee.Image("USGS/SRTMGL1_003");
 //var Terrain = srtm;
function getSamples(stablePixels, mosaic, mosaic2,classIds, pointsPerClass) {
  
  var years = ee.List(ALL_YEARS());
  
  var keys = years.map( function(year) {
    var stringYear = ee.String(year);
    return ee.String('samples-').cat(stringYear);
  });
  
  var points = stablePixels
    .addBands(ee.Image.pixelLonLat())
    .stratifiedSample({
        numPoints: 0,
        classBand: 'reference',
        region: stablePixels.geometry(),
        scale: 30,
        seed: 1,
        geometries: true,
        dropNulls: true,
        classValues: classIds, 
        classPoints: pointsPerClass
    });

  var yearMosaic;
  var yearMosaic2;
  
  // Adicionando Elevación y pendiente..
  var terrain = ee.call('Terrain', ee.Image('USGS/SRTMGL1_003'));
  terrain = terrain.clip(param.reg);
  var elevacion = terrain.select('elevation').rename('elevacion');
  var pendiente = terrain.select('slope').rename('pendiente');
  var temp;
  var pointsTemp;
  var trainingSamples = years.map( function(year) {
    yearMosaic = mosaic
      .filterMetadata('year', 'equals', year)
      .mosaic();
    yearMosaic2 = mosaic2
      .filterMetadata('year', 'equals', year)
      .mosaic();
    
    yearMosaic = yearMosaic.addBands(yearMosaic2)
    yearMosaic = yearMosaic.select(param.variables)
    yearMosaic = yearMosaic.clip(param.reg)
    
    temp = yearMosaic.select(0).multiply(0).reduceToVectors({
      geometry: param.reg,
      //crs: nl2012.projection(),
      scale: 30,
      geometryType: 'polygon',
      eightConnected: false,
      labelProperty: 'zone',
      reducer: ee.Reducer.mean()
    });
    
    
    if (param.Altura > 0){
      yearMosaic = yearMosaic.addBands(elevacion)
    }
    if (param.Pendiente > 0){
      yearMosaic = yearMosaic.addBands(pendiente)
    }
    
    if (param.ActPuntosAdicional > 0){
      points = points.merge(param.PuntosAdcionales)
    }
    pointsTemp = points.filterBounds(temp)
    var training = stablePixels
      .addBands(yearMosaic)
      .sampleRegions({
        collection: pointsTemp,
        properties: ['reference'],
        scale: 30,
        geometries: true
      });
    
    return training;
    
  });
  
  return {
    data: ee.Dictionary.fromLists(keys, trainingSamples),
    points: points
  };

}


/**
 * Función para enviar visualización al mapa
 * 
 */
function addLayersToMap(training, stablePixels, mosaic, mosaic2, Year, region) {
  
  // var trainingYear = ee.FeatureCollection(training.get('SAMPLES-' + year));
  var PALETTE = [
    'ffffff', 'FF0000', 'e2c539', '006400', '00ff00', '687537', '76a5af',
    '29eee4', '77a605', '935132', 'bbfcac', '45c2a5', 'b8af4f', 'f1c232', 
    'ffffb2', 'ffd966', 'f6b26b', 'f99f40', 'e974ed', 'd5a6bd', 'c27ba0',
    'fff3bf', 'ea9999', 'dd7e6b', 'aa0000', 'ff99ff', '0000ff', 'd5d5e5',
    'dd497f', 'b2ae7c', 'af2a2a', '8a2be2', '968c46', '0000ff', '4fd3ff'
  ];
  
  print(param.yearsPreview)
  param.yearsPreview.forEach(function(year) {
    var filtered = mosaic.filterMetadata('year', 'equals', year)
      .mosaic()
      .clip(region);
      
    var filtered2 = mosaic2.filterMetadata('year', 'equals', year)
      .mosaic()
      .clip(region);
    filtered = filtered.addBands(filtered2)
    
    Map.addLayer(
      filtered,
      {
        bands: ['swir1_median', 'nir_median', 'red_median'],
        gain: [0.08, 0.06, 0.2]
      },
      'MOSAICO ' + year.toString(), false
    );
  });


  var styledPoints = ee.FeatureCollection(training).map(
    function(point) {
      var classId = point.get('reference'),
          color = ee.List(PALETTE).get(classId);
      
      return point.set({ style: { color: color } });
    }
  );
  
  Map.addLayer(stablePixels, {
    min: 0,
    max: 34,
    palette: PALETTE
  }, 'PIXELES ESTABLES');

   var blank = ee.Image(0).mask(0);
  var outline = blank.paint(region, '000000', 2); 
  var visParLine = {'palette':'000000','opacity': 0.6};
  Map.addLayer(outline,visParLine,'REGION')
  /*
  Map.addLayer(
    region.style({
      fillColor: '00000066'
    }), {}, 'REGION');
  */
  Map.addLayer(
    styledPoints.style({
      styleProperty: "style",
      width: 1.5,
    }), {}, 'MUESTRAS DE ENTRENAMIENTO'
  );
  if (param.ActPuntosAdicional>0){
      Map.addLayer(
        param.PuntosAdcionales.filterMetadata('reference','equals',1)
        , {'color':'red'}, 'MUESTRAS COMP AGRI'
      );
      Map.addLayer(
        param.PuntosAdcionales.filterMetadata('reference','equals',2)
        , {'color':'#FFFF00'}, 'MUESTRAS COMP NO AGRI'
      );
      
      
  }


}


/**
 * Función para exportar las muestras de entrenamiento como assets de GEE
 */
function exportSamples(samples, outputDir, country, regionId, version) {
  
  var years = ALL_YEARS();
  
  years.forEach( function(year) {
  
    var sampleYear = samples.get('samples-' + year),
        yearInt = parseInt(year, 10);
    
    var collection = ee.FeatureCollection(sampleYear)
      .map( function(feature) {
        return feature.set('year', yearInt);
      });

    // Exportar muestras
    var filename = 'samples-' + country + '-' + regionId + '-' + 
      year + '-'+ 'p03'+'-'+version;
    
    Export.table.toAsset(
      collection,
      filename,
      outputDir + country + '/' + filename
    );
      
  });
  
}
