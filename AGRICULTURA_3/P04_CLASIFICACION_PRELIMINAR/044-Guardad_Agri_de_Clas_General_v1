/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-65.04576210575466, -17.59757946239],
          [-65.04576210575466, -19.20291117519659],
          [-64.27671913700466, -19.20291117519659],
          [-64.27671913700466, -17.59757946239]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/** 
 * PASO 4.4: GUARDAR CLASIFICACION GENERAL COL3 COMO RESULTADO AGRICULTURA PASO 4 VERSIÓN 1
 * SEPTIEMBRE 2020
 * ----------------------------------------------------------------------------------------------
 */  

var param = {
  regionId: 20201,
  inputVersion:4, // versión del paso Col3 clasificación general que se quiere guardar como agricultura
  outputVersion: 1, // v1 = Paso 4 ; v3 paso 8 ; > v2 filtros en agricultura
  remap: { // 1 - Agricultura  2 - No aagricultura 
    from: [3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34],
    to:   [2, 2, 2, 2, 2,  2,  2,  2,  2,  2, 2,   2,  2,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2]
  },
  yearsPreview: [ 2015,2018 ]
};

var regionMask;
var geom;
var ClassCol3;

(function init(param) {
  
  var assets = {
    grids: 'projects/mapbiomas-raisg/DATOS_AUXILIARES/VECTORES/cartas-mapbiomas-3',
    regions: 'projects/mapbiomas-raisg/DATOS_AUXILIARES/VECTORES/clasificacion-regiones-3',
    mosaics: 'projects/mapbiomas-raisg/MOSAICOS/',
    //trainingSamples: 'projects/mapbiomas-raisg/MUESTRAS/COLECCION3/PUNTOS_ESTABLES/',
    trainingSamples: 'projects/mapbiomas-raisg/MUESTRAS/COLECCION3/TRANSVERSALES/AGRICULTURA/',
    outputs: 'projects/mapbiomas-raisg/MUESTRAS/COLECCION3/PUNTOS_ESTABLES/',
    ClassCol3: ''
  };
  
  
  if (param.inputVersion ===1 || param.inputVersion ===2 ){
    assets.ClassCol3 = 'projects/mapbiomas-raisg/COLECCION3/clasificacion/';
  }else{
    assets.ClassCol3 = 'projects/mapbiomas-raisg/COLECCION3/clasificacion-ft/';
  }
  
  // Crear máscara con base en el vector de región y carta
  
  var region = getRegion(
    assets.regions, assets.grids, param.regionId, param.gridName);
  
  regionMask = region


  var country = region.vector.first().get('pais').getInfo()
    .toUpperCase()
    .replace('Ú', 'U')
    .replace(' ', '_');
  
  
  //BOLIVIA-20101-1  
  var NomImg = country+'-'+param.regionId+'-'+param.inputVersion;
  
  var ClassGeneral = ee.Image(assets.ClassCol3+NomImg)
  print(ClassGeneral)
  
  var years = ALL_YEARS();
  var originalClasses = param.remap.from;
  var newClasses = param.remap.to;
  var Imgtemp;
  var Res=1;
  ClassCol3 = ClassGeneral;
  years.forEach(function(y){
    Imgtemp = ClassGeneral.select('classification_'+y);
    Imgtemp = Imgtemp.remap(originalClasses,newClasses);
    Imgtemp = Imgtemp.rename('classification_'+y);
    if (Res===1){
      Res = Imgtemp;
    }
    else{
      Res = Res.addBands(Imgtemp);
    }
  })
  ClassGeneral = Res;
  
  // Importar assets con base en la región
  var mosaicPath = assets.mosaics;
  var assetsMosaics = [ 
     //mosaicPath + 'workspace-c2-v2',
     mosaicPath + 'workspace-c3-v2'
  ];
  
  //var mosaic = getMosaic(
  //  assetsMosaics, param.regionId, param.variables, param.gridName);
  var RegMos = parseInt(param.regionId/100)
  RegMos = RegMos.toString();
  
  var mosaic = ee.ImageCollection(assetsMosaics[0])
              .filterMetadata('region_code','equals',RegMos)
              .filterBounds(region.vector)
              //.mosaic()
  var mosaic2 = ee.ImageCollection([])
              //.filterMetadata('region_code','equals',RegMos)
              //.filterBounds(region.vector)
              //.mosaic()
  
  // Generar el análisis de variables y la clasificación
  var regionId = param.regionId;
  
  if(param.gridName && param.gridName !== '')
    regionId = regionId + '-' + param.gridName;

    // Enviar resultados al mapa
  var rgbVariables = ['swir1_median', 'nir_median', 'red_median'];
  
  var rgbMosaic = mosaic.select(rgbVariables)
  
  var classified = ClassGeneral
  
  addLayersToMap(classified, rgbMosaic, param.yearsPreview, region.vector);
  
      
  classified = classified.set({
    version:param.outputVersion,
    descripcion: 'clasificacion-v1',
    paso: 'P04'
  })
  // Exportar assets a GEE y Google Drive
  var basePath = 'projects/mapbiomas-raisg/TRANSVERSALES/AGRICULTURA_3/clasificacion/',
      filename = country + '-' + regionId + '-' + param.outputVersion,
      imageId = basePath + filename;
  
  
  exportImage(
    classified, filename, imageId, region.vector, param.driveFolder);
  
  //exportFeatures(
  //  importance, 'IMPORTANCE-TABLE-' + filename+'-TA', param.driveFolder);
    

  // Mostrar información en la consola
  print("Mosaicos", mosaic);
  print("Clasificación", classified);

})(param);  





/**
 * ----------------------------------------------------------------------------------------------
 * FUNCIONALIDADES
 * A continuación se definen las funcionalidades que se usan en la aplicación.
 * Estas features se inyectan en la función init() que las ejecuta y genera los
 * resultados.
 * ----------------------------------------------------------------------------------------------
 */



/**
 * Constantes globales
 */
function ALL_YEARS() {
  return [
    1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
    1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 
    2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
    2018,2019,2020
  ];
}



/**
 * Función para asignar una versión arbitraria
 * Este campo se asigna y luego se usa como referencia para la conversión a raster
 */
function setVersion(item) { return item.set('version', 1) }



/**
 * Función para generar region de interés (ROI) con base en
 * las región de clasificación o una grilla millonésima contenida en ella
 */
function getRegion(regionPath, gridPath, regionId, gridName){
  
  var region = ee.FeatureCollection(regionPath)
        .filterMetadata("id_regionC", "equals", regionId);
  
  if(gridName && gridName !== '') {
    var grid = ee.FeatureCollection(gridPath)
      .filterMetadata("name", "equals", gridName)
      .first();
      
    grid = grid.set('pais', region.first().get('pais'));
    
    region = ee.FeatureCollection(ee.Feature(grid));
  } 
  else region = region;
  
  var regionMask01 = region
    .map(setVersion)
    .reduceToImage(['version'], ee.Reducer.first());
    
  return {
    vector: region,
    rasterMask: regionMask01
  };

}


 

/**
 * Función para filtrar mosaicos
 * Permite filtrar los mosaicos por codigo de región y grilla 250.000,
 * También gestiona la selección de índices que serán utilizados para generar los
 * puntos de entrenamiento.
 */
function getMosaic(paths, regionId, variables, gridName,regionVector) {
  
  

}
/**
 * Función para tomar muestras complementarias o muestras de clases nuevas
 */
function resampleCover(mosaic, additionalSamples) {
  
  var polygons = additionalSamples.polygons,
      classIds = additionalSamples.classes,
      points = additionalSamples.points,
      newSamples = [];
  var cont=0;
  polygons.forEach(function(polygon, i) {
    polygon = polygon.filterBounds(regionMask.vector)
    var newSample = mosaic.sample({
      numPixels: points[i],
      region: polygon,
      scale: 30,
      projection: 'EPSG:4326',
      seed: 1,
      geometries: true,
      tileScale:param.tileScale
    })
    .map(function(item) { return item.set('reference', classIds[ i ]) });
    if (YearRun >= additionalSamples.Periodo[cont][0] && YearRun <= additionalSamples.Periodo[cont][1]){
       newSamples.push(newSample);
    }
    cont = cont+1
  });
  
  return ee.FeatureCollection(newSamples).flatten();

}
/**
 * Función para generar clasificación 
 */
 

function randomForestsClassify(
  trainingSamplesPath, additionalSamples, mosaic, mosaic2, trees, region) {
  
  var getokYear = function(Y){
    var okY = Y;
    var Flag =false;
    // primero pensamos en el año 1985 
    //print(param.NoMosaicYear.indexOf(okY))
    while (param.NoMosaicYear.indexOf(okY)>=0){
      okY = okY+1
    }
    if (param.NoMosaicYear.indexOf(okY)===-1 && okY<=2020){
      Flag = true;
    }
    if (okY>=2020 && Flag===false){
      okY = 2020
      while (Flag===false && param.NoMosaicYear.indexOf(okY)>=0){
        okY = okY-1
      } 
    }
    return  okY
  }
  
  var YearFix

  var years = ALL_YEARS(),
      variablesImportance = ee.FeatureCollection([]),
      classified = ee.Image(0);

  var c=0;
  var geo;
  additionalSamples.polygons.forEach(function(Ele){
    geo = Ele.getInfo()
    additionalSamples.Periodo[c] =[geo.features[0].properties.PIni,geo.features[0].properties.PFin] 
    c = c+1;
    print('Geometria '+c+' - Periodo',geo.features[0].properties.PIni+'-'+geo.features[0].properties.PFin)
  })
  //print(additionalSamples.Periodo)
  years.forEach(function(year){
    YearFix = getokYear(year);
    var yearMosaic = mosaic
      .filterMetadata('year', 'equals', YearFix)
      .mosaic();
    
   
    
    //yearMosaic = yearMosaic.addBands(yearMosaic2)
    yearMosaic = yearMosaic.select(param.variables)
    yearMosaic = yearMosaic.clip(region.vector)
    
     // Adicionando Elevación y pendiente..
    
    var terrain = ee.call('Terrain', ee.Image('USGS/SRTMGL1_003'));
    terrain = terrain.clip(region.vector);
    var elevacion = terrain.select('elevation').rename('elevacion');
    var pendiente = terrain.select('slope').rename('pendiente');
    
    if(param.variables.length > 0) yearMosaic = yearMosaic.select(param.variables);
    
    
    
    if (param.Altura > 0){
      yearMosaic = yearMosaic.addBands(elevacion)
    }
    if (param.Pendiente > 0){
      yearMosaic = yearMosaic.addBands(pendiente)
    }
    
    var bands = yearMosaic.bandNames();
    var contained = bands.containsAll(ee.List(param.variables));
    
    
    var nBands = bands.size();
    
    
    /*
    var yearTrainingSamples = ee.FeatureCollection(
      ee.Algorithms.If(
        ee.Algorithms.IsEqual(nBands, 0),
        null,
        ee.FeatureCollection(
          trainingSamplesPath + '-' + YearFix + '-' + 'p03' + '-' + '1')
      )
    );
    */
    var yearTrainingSamples = ee.FeatureCollection(
      ee.Algorithms.If(
        contained,
        ee.FeatureCollection(
          trainingSamplesPath + '-' + YearFix + '-' + 'p03' + '-' + param.samplesVersion),
          
        null
      )
    );
    
    // Identificar numero de clases en las muestras
    /*
    var nClasSample = yearTrainingSamples
      .reduceColumns(ee.Reducer.toList(), ['reference'])
      .get('list');
    */
    var nClasSample = ee.List(
      ee.Algorithms.If(
        contained,
        yearTrainingSamples
          .reduceColumns(ee.Reducer.toList(), ['reference'])
          .get('list'),
        null
      )
    );
      
    nClasSample = ee.List(nClasSample)
      .reduce(ee.Reducer.countDistinct());
    
      
    // Incluir muestras complementarias
    if(additionalSamples.polygons.length > 0){
      var Geo,PIni,PFin;
      
      var Feature = ee.FeatureCollection([])
      c=0;
      additionalSamples.polygons.forEach(function(Ele){
        PIni = additionalSamples.Periodo[c][0];
        PFin = additionalSamples.Periodo[c][1];
        if (PIni>= YearFix && PFin<=YearFix){
          Feature = Feature.merge(Ele)
        }
        c=c+1;
      })
      //var insidePolygons = ee.FeatureCollection(additionalSamples.polygons)
      
      var insidePolygons = Feature//ee.FeatureCollection(Feature)
        //.map(setVersion)
        .reduceToImage(['reference'], ee.Reducer.first());
      
      var outsidePolygons = insidePolygons.eq(1).mask().eq(0).selfMask();
      outsidePolygons = region.rasterMask.updateMask(outsidePolygons);
      /*
      var outsideVector = ee.FeatureCollection(
        outsidePolygons.reduceToVectors({
          reducer: ee.Reducer.countEvery(), 
          geometry: region.vector, 
          scale: 30,
          maxPixels: 1e8
        })
      );*/ 
      var outsideVector = outsidePolygons.reduceToVectors({
        reducer: ee.Reducer.countEvery(),
        //geometry: region.geometry().bounds(),
        geometry: region.vector, 
        scale: 30,
        maxPixels: 1e13
      });
      
      YearRun = YearFix;
      var newSamples = resampleCover(yearMosaic, additionalSamples);
      
      yearTrainingSamples = yearTrainingSamples.filterBounds(outsideVector)
        .merge(newSamples);
      
      //print(yearTrainingSamples.limit(100))
      //Map.addLayer(newSamples,{},'Puntos adicionales'+YearFix,false)
      //print(YearFix,newSamples.size())
    }


    // Definir clasificador y generar tablas de importancia
    var classifier = ee.Classifier.smileRandomForest({
        numberOfTrees: trees, 
        variablesPerSplit: 1
    });
    
    classifier = ee.Classifier(
      ee.Algorithms.If(
        ee.Algorithms.IsEqual(nBands, 0),
        null, 
        ee.Algorithms.If(
          // solución al problema 'only one class'
          ee.Algorithms.IsEqual(nClasSample, 1),
          null,
          classifier.train(yearTrainingSamples, 'reference', bands)
        )
      )
    );

    var explainer = ee.Dictionary(
      ee.Algorithms.If(
        ee.Algorithms.IsEqual(nBands, 0) ,
        null,ee.Algorithms.If(
        ee.Algorithms.IsEqual(nClasSample, 1) ,
        null,
        classifier.explain()
      )
      )
    );
      
    var importances = ee.Feature(
      ee.Algorithms.If(
        ee.Algorithms.IsEqual(nBands, 0),
        null, 
        ee.Algorithms.If(
          // solución al problema 'only one class'
          ee.Algorithms.IsEqual(nClasSample, 1),
          null,
          ee.Feature( null, 
            ee.Dictionary(explainer.get('importance')))
              .set('_trees', explainer.get('numberOfTrees'))
              .set('_oobError', explainer.get('outOfBagErrorEstimate'))
              .set('_year', year)
        )
      )
    );
    
    variablesImportance = variablesImportance
        .merge( ee.FeatureCollection( [ importances ] ));


    // Generar la clasificacion
   
    classified = ee.Image(
      ee.Algorithms.If(
        ee.Algorithms.IsEqual(nBands, 0),
        classified.addBands(
          ee.Image().updateMask(region.rasterMask)
            .rename('classification_' + year)
        ),
        ee.Algorithms.If(
          // solución al problema 'only one class'
          ee.Algorithms.IsEqual(nClasSample, 1),
          classified.addBands(
            ee.Image().updateMask(region.rasterMask)
              .rename('classification_' + year)
          ),
          classified.addBands(
            yearMosaic.classify(classifier)
              .select(['classification'], ['classification_' + year])
          )
        )
      )
    ).unmask(27).updateMask(region.rasterMask).toByte();
    
    
    
    
    return classified;
  });
  
  return {
    importance: variablesImportance,
    coverImage: classified.slice(1)
  };

}



/**
 * Función para enviar visualización al mapa
 * 
 */
function addLayersToMap(image, mosaic, years, region) {
  
  function PALETTE() {
  return [
    'ffffff', 'FF0000', 'e2c539', '006400', '00ff00', '687537', '76a5af',
    '29eee4', '77a605', '935132', 'bbfcac', '45c2a5', 'b8af4f', 'f1c232', 
    'ffffb2', 'ffd966', 'f6b26b', 'f99f40', 'e974ed', 'd5a6bd', 'c27ba0',
    'fff3bf', 'ea9999', 'dd7e6b', 'aa0000', 'ff99ff', '0000ff', 'd5d5e5',
    'dd497f', 'b2ae7c', 'af2a2a', '8a2be2', '968c46', '0000ff', '4fd3ff'
  ];
}
  var PALETTE2 = [
    'ffffff', 'ffff00','00ff00'
  ];

  years.forEach(function(year) {
    var filtered = mosaic.filterMetadata('year', 'equals', year)
      .mosaic()
      .clip(region);
    Map.addLayer(
      filtered,
      {
        bands: ['swir1_median', 'nir_median', 'red_median'],
        gain: [0.08, 0.06, 0.2]
      },
      'MOSAICO ' + year.toString(), false
    );
    
    Map.addLayer(ClassCol3.select('classification_' + year.toString()),
      {
        min: 0,
        max:34,
        palette: PALETTE()
      },
      'CLASIFICACION Col 3 ' + year.toString(), true
    );
    Map.addLayer(image.select('classification_' + year.toString()),
      {
        min: 0,
        max:34,
        palette: PALETTE()
      },
      'CLASIFICACION Agri ' + year.toString(), true
    );
  });
}



/**
 * Función para exportar assets a GEE y drive 
 */
function exportImage(image, imageName, imageId, region, driveFolder) {
  Export.image.toAsset({
    image: image.toInt8(),
    description: imageName,
    assetId: imageId,
    scale: 30,
    pyramidingPolicy: {
      '.default': 'mode'
    },
    maxPixels: 1e13,
    region: region.geometry().bounds()
  });
  
  Export.image.toDrive({
    image: image.toInt8(),
    description: imageName + '-DRIVE',
    folder: driveFolder,
    scale: 30,
    maxPixels: 1e13,
    region: region.geometry().bounds()
  });
}
 
function exportFeatures(features, tableName, driveFolder) {
  Export.table.toDrive({
    collection: features, 
    description: tableName,
    folder: driveFolder,
    fileFormat: 'CSV',
  });
}

